{"version":3,"sources":["components/Button/index.tsx","components/Input/index.tsx","components/TodoItem/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","label","backgroundColor","hoverColor","onClick","Container","Label","styled","div","props","Input","placeholder","value","onChange","InputBox","event","target","input","ToDoItem","onDelete","Contents","InputContainer","ToDoListContainer","App","useState","toDo","setTodo","toDoList","setToDoList","map","item","index","list","splice","deleteToDo","text","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAUaA,EAAS,SAAC,GAKT,IAJZC,EAIW,EAJXA,MAIW,IAHXC,uBAGW,MAHO,UAGP,MAFXC,kBAEW,MAFE,UAEF,EADXC,EACW,EADXA,QAEA,OACE,cAACC,EAAD,CAAWH,gBAAiBA,EAAiBC,WAAYA,EAAYC,QAASA,EAA9E,SACE,cAACE,EAAD,UAAQL,OAURI,EAAYE,IAAOC,IAAV,wQAEO,SAACC,GAAD,OAAWA,EAAMP,mBAKf,SAACO,GAAD,OAAWA,EAAMN,cAOnCG,EAAQC,IAAOC,IAAV,gECjCEE,EAAQ,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAC1C,OACE,cAACC,EAAD,CACEF,MAAOA,EACPD,YAAaA,EACbE,SAAU,SAACE,GACe,oBAAbF,GACTA,EAASE,EAAMC,OAAOJ,WAO1BE,EAAWP,IAAOU,MAAV,qJCdDC,EAAW,SAAC,GAAgC,IAA9BjB,EAA6B,EAA7BA,MAAOkB,EAAsB,EAAtBA,SAChC,OACE,eAAC,EAAD,WACE,cAAC,EAAD,UAAQlB,IACR,cAAC,EAAD,CAAQA,MAAM,eAAKC,gBAAgB,UAAUC,WAAW,UAAUC,QAASe,QAK3Ed,EAAYE,IAAOC,IAAV,8IAQTF,EAAQC,IAAOC,IAAV,mFCiBX,IAAMH,EAAYE,IAAOC,IAAV,mJAQTY,EAAWb,IAAOC,IAAV,6LASRa,EAAiBd,IAAOC,IAAV,8CAIdc,EAAoBf,IAAOC,IAAV,gJAQRe,EAnEf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAgCF,mBAAmB,IAAnD,mBAAOG,EAAP,KAAiBC,EAAjB,KAeA,OACE,cAAC,EAAD,UACE,eAACR,EAAD,WACE,cAACE,EAAD,CAAmB,cAAY,WAA/B,SACGK,EAASE,KAAI,SAACC,EAAMC,GAAP,OACZ,cAAC,EAAD,CAAqB9B,MAAO6B,EAAMX,SAAU,kBAXnC,SAACY,GAClB,IAAIC,EAAI,YAAOL,GACfK,EAAKC,OAAOF,EAAO,GACnBH,EAAYI,GAQ8CE,CAAWH,KAA9CD,QAGnB,eAACT,EAAD,WACE,cAAC,EAAD,CACEV,YAAY,6DACZC,MAAOa,EACPZ,SAAU,SAACsB,GAAD,OAAUT,EAAQS,MAE9B,cAAC,EAAD,CAAQlC,MAAM,eAAKG,QA3BX,WACVqB,IACFG,EAAY,GAAD,mBAAKD,GAAL,CAAeF,KAC1BC,EAAQ,iBCECU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a0a488e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface Props {\r\n  readonly label: string;\r\n  readonly backgroundColor?: string;\r\n  readonly hoverColor?: string;\r\n  readonly onClick?: () => void;\r\n}\r\n\r\nexport const Button = ({\r\n  label,\r\n  backgroundColor = '#304FFE',\r\n  hoverColor = '#1E40FF',\r\n  onClick,\r\n}: Props) => {\r\n  return (\r\n    <Container backgroundColor={backgroundColor} hoverColor={hoverColor} onClick={onClick}>\r\n      <Label>{label}</Label>\r\n    </Container>\r\n  );\r\n};\r\n\r\ninterface ContainerProps {\r\n  readonly backgroundColor: string;\r\n  readonly hoverColor: string;\r\n}\r\n\r\nconst Container = styled.div<ContainerProps>`\r\n  text-align: center;\r\n  background-color: ${(props) => props.backgroundColor};\r\n  padding: 10px 20px;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: ${(props) => props.hoverColor};\r\n  }\r\n  &:active {\r\n    box-shadow: inset 5px 5px 10px rgba(0, 0, 0, 0.2);\r\n  }\r\n`;\r\n\r\nconst Label = styled.div`\r\n  color: #fff;\r\n  font-size: 16px;\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface Props {\r\n  readonly placeholder?: string;\r\n  readonly value?: string;\r\n  readonly onChange?: (text: string) => void;\r\n}\r\n\r\nexport const Input = ({ placeholder, value, onChange }: Props) => {\r\n  return (\r\n    <InputBox\r\n      value={value}\r\n      placeholder={placeholder}\r\n      onChange={(event) => {\r\n        if (typeof onChange === 'function') {\r\n          onChange(event.target.value);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst InputBox = styled.input`\r\n  flex: 1;\r\n  font-size: 16px;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  border: 1px solid #bdbdbd;\r\n  outline: none;\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Button } from 'components';\r\n\r\ninterface Props {\r\n  readonly label: string;\r\n  readonly onDelete?: () => void;\r\n}\r\n\r\nexport const ToDoItem = ({ label, onDelete }: Props) => {\r\n  return (\r\n    <Container>\r\n      <Label>{label}</Label>\r\n      <Button label=\"삭제\" backgroundColor=\"#FF1744\" hoverColor=\"#F01440\" onClick={onDelete} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  border-bottom: 1px solid #bdbdbd;\r\n  margin: 10px;\r\n  padding: 10px;\r\n`;\r\n\r\nconst Label = styled.div`\r\n  flex: 1;\r\n  font-size: 16px;\r\n  margin-right: 20px;\r\n`;\r\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { Button, Input, ToDoItem } from 'components';\n\nfunction App() {\n  const [toDo, setTodo] = useState('');\n  const [toDoList, setToDoList] = useState<string[]>([]);\n\n  const addToDo = (): void => {\n    if (toDo) {\n      setToDoList([...toDoList, toDo]);\n      setTodo('');\n    }\n  };\n\n  const deleteToDo = (index: number): void => {\n    let list = [...toDoList];\n    list.splice(index, 1);\n    setToDoList(list);\n  };\n\n  return (\n    <Container>\n      <Contents>\n        <ToDoListContainer data-testid=\"toDoList\">\n          {toDoList.map((item, index) => (\n            <ToDoItem key={item} label={item} onDelete={() => deleteToDo(index)} />\n          ))}\n        </ToDoListContainer>\n        <InputContainer>\n          <Input\n            placeholder=\"할 일을 입력해 주세요.\"\n            value={toDo}\n            onChange={(text) => setTodo(text)}\n          />\n          <Button label=\"추가\" onClick={addToDo} />\n        </InputContainer>\n      </Contents>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Contents = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.2);\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n`;\n\nconst ToDoListContainer = styled.div`\n  min-width: 350px;\n  height: 400px;\n  overflow-y: scroll;\n  border: 1px solid #bdbdbd;\n  margin-bottom: 20px;\n`;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}